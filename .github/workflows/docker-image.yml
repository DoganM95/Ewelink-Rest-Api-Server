name: Docker CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  docker:
    runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node: [14.x, 15.x]
        
    steps:
    
    - name: Checkout repo
      uses: actions/checkout@v2
      
#     - name: Setup specific node version
#       uses: actions/setup-node@main
#       with:
#         node-version: ${{matrix.node}}
      
#     - name: Show installed node and npm version
#       run: |
#         node -v
#         npm --version

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ACCESSTOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: doganm95/ewelink-rest-api-server:latest
      
      
# jobs:
#   # Run tests.
#   # See also https://docs.docker.com/docker-hub/builds/automated-testing/
#   test:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2

#       - name: Run tests
#         run: |
#           if [ -f docker-compose.test.yml ]; then
#             docker-compose --file docker-compose.test.yml build
#             docker-compose --file docker-compose.test.yml run sut
#           else
#             docker build -f ./docker/Dockerfile .
#           fi

#   # Push image to GitHub Packages.
#   # See also https://docs.docker.com/docker-hub/builds/
#   push:
#     # Ensure test job passes before pushing image.
#     needs: test

#     runs-on: ubuntu-latest
#     if: github.event_name == 'push'

#     steps:
#       - uses: actions/checkout@v2

#       - name: Build image
#         run: docker build . --file Dockerfile --tag $IMAGE_NAME

#       - name: Log into registry
#         run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

#       - name: Push image
#         run: |
#           IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

#           # Change all uppercase to lowercase
#           IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

#           # Strip git ref prefix from version
#           VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

#           # Strip "v" prefix from tag name
#           [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

#           # Use Docker `latest` tag convention
#           [ "$VERSION" == "main" ] && VERSION=latest

#           echo IMAGE_ID=$IMAGE_ID
#           echo VERSION=$VERSION

#           docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
#           docker push $IMAGE_ID:$VERSION
